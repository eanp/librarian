// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id()
  name       String?
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  role       String   @default("user")
  user_image String?
  active     Boolean  @default(false)

  session    Session[]
  post       Post[]
  Book       Book[]
  borrowings Borrowing[]

  @@map("users")
}

model Session {
  id        String   @id @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime @map("expires_at")

  @@map("sessions")
}

model Post {
  id         String   @id()
  title      String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     String   @default("draft")
  post_image String?
  user_id    String

  user User @relation(fields: [user_id], references: [id])

  @@map("posts")
}

model Image {
  id        Int      @id @default(autoincrement())
  filename  String
  path      String
  createdAt DateTime @default(now())

  @@map("images")
}

model Book {
  code            String   @id
  title           String
  description     String
  publicationYear Int
  condition       String   @default("NEW")
  cover_photo     String
  price           Int
  grade           String
  writer          String
  class           String
  category        String
  publisher       String
  rack            String
  created_by      String
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
  user            User     @relation(fields: [created_by], references: [id])

  Borrowing Borrowing[]

  @@map("books")
}

model Borrowing {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  book          Book      @relation(fields: [bookCode], references: [code])
  bookCode      String
  borrowed_date DateTime  @default(now())
  due_date      DateTime
  returned_date DateTime?
  status        String    @default("BORROWED")
  fine_amount   Int       @default(0)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  created_by    String    @default("admin")

  @@map("borrowings")
}
